name: 'Expo CD'
description: 'Build and deploy Expo app on self hosted runner (linux for android, macos for ios).'

inputs:
  ref:
    description: 'Git ref to checkout'
    required: false
  eas-profile:
    description: 'EAS profile to use for the build'
    required: true
  platform:
    description: 'Platform to build for (ios or android)'
    required: true
  working-dir:
    description: 'Path of the expo project'
    required: true
  env:
    description: 'Environment to deploy to (dev, staging, prod)'
    required: true
  expo-token:
    description: 'Expo token for authentication'
    required: true
  fake-bump:
    description: Automatically bump patch version to prevent App Store version conflict
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Checkout (ios)
      uses: actions/checkout@v4
      if: inputs.platform == 'ios'
      with:
        submodules: true
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: pnpm install (ios)
      shell: bash
      run: pnpm install --frozen-lockfile --ignore-scripts
      if: inputs.platform == 'ios'

    - name: pnpm install (android)
      if: inputs.platform == 'android'
      uses: falcondev-it/.github/actions/pnpm-install@master
      with:
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: Install bumpp
      if: inputs.fake-bump == 'true'
      run: pnpm install -g bumpp

    - name: Fake bump
      if: inputs.fake-bump == 'true'
      shell: bash
      working-directory: ${{ inputs.working-dir }}
      run: |
        bumpp --push=false --no-tag --no-commit -y patch

        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        VERSION=$(jq -r '.version' package.json)
        git tag -a "v$VERSION" -m "v$VERSION"

    - name: Deploy info
      shell: bash
      working-directory: ${{ inputs.working-dir }}
      run: |
        COMMIT_SHA=$(git rev-parse --short HEAD)
        LATEST_VERSION=$(git tag -l --sort=-v:refname --merged | grep -oE '^v[0-9]+.[0-9]+.[0-9]+' | head -1)
        COMMITS_SINCE_RELEASE=$(git rev-list $LATEST_VERSION..HEAD --count)

        if [[ "${{ inputs.env }}" == "dev" ]]; then
          DEPLOY_VERSION="$LATEST_VERSION ($COMMITS_SINCE_RELEASE)  [$COMMIT_SHA]"
        else
          DEPLOY_VERSION="$LATEST_VERSION  [$COMMIT_SHA]"
        fi

        echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "COMMITS_SINCE_RELEASE=$COMMITS_SINCE_RELEASE" >> $GITHUB_OUTPUT
        echo "DEPLOY_VERSION=$DEPLOY_VERSION" >> $GITHUB_OUTPUT

        echo "▶️ $DEPLOY_VERSION"

        cat <<EOL >> .env
        EXPO_PUBLIC_VERSION=$LATEST_VERSION
        EXPO_PUBLIC_COMMIT_SHA=$COMMIT_SHA
        EXPO_PUBLIC_COMMITS_SINCE_RELEASE=$COMMITS_SINCE_RELEASE
        EXPO_PUBLIC_DEPLOY_VERSION=$DEPLOY_VERSION
        EOL

        cat eas.json | jq -r --arg profile "${{ inputs.eas-profile }}" '
          .build.default.env as $default |
          .build[$profile].env as $profile |
          ($default + ($profile // {})) |
          to_entries | .[] | "\(.key)=\(.value)"
        ' >> .env

        cat .env >> $GITHUB_ENV

    - name: Expo prebuild (android)
      if: inputs.platform == 'android'
      shell: bash
      working-directory: ${{ inputs.working-dir }}
      run: pnpm exec expo prebuild --platform android --no-install

    - name: Setup Java (android)
      uses: actions/setup-java@ebb356cc4e59bcf94f518203228485f5d40e4b58
      if: inputs.platform == 'android'
      with:
        distribution: temurin
        java-version: '21'
        cache: gradle
        cache-dependency-path: |
          ${{ inputs.working-dir }}/android/**/*.gradle*
          ${{ inputs.working-dir }}/android/**/gradle-wrapper.properties
          ${{ inputs.working-dir }}/android/buildSrc/**/Versions.kt
          ${{ inputs.working-dir }}/android/buildSrc/**/Dependencies.kt
          ${{ inputs.working-dir }}/android/gradle/*.versions.toml
          ${{ inputs.working-dir }}/android/**/versions.properties

    - name: Set ANDROID_HOME and ANDROID_SDK_ROOT (android)
      if: inputs.platform == 'android'
      id: android-env
      shell: bash
      run: |
        echo "ANDROID_HOME=$HOME/.android/sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.android/sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.android/sdk" >> $GITHUB_OUTPUT
        echo "ANDROID_SDK_ROOT=$HOME/.android/sdk" >> $GITHUB_OUTPUT

    - name: Android SDK packages
      id: android-sdk-packages
      shell: bash
      run: echo 'packages=platform-tools build-tools;35.0.0 platforms;android-35 build-tools;34.0.0 platforms;android-34' >> $GITHUB_OUTPUT

    - name: Create Android SDK cache key (android)
      if: inputs.platform == 'android'
      run: echo '${{ steps.android-sdk-packages.outputs.packages }}' > android-sdk-packages.txt
      shell: bash

    - name: Cache Android SDK (android)
      if: inputs.platform == 'android'
      id: cache-android-sdk
      uses: actions/cache@v4
      with:
        path: ${{ steps.android-env.outputs.ANDROID_HOME }}
        key: ${{ runner.os }}-sdk-${{ hashFiles('android-sdk-packages.txt') }}

    - name: Setup Android SDK (android)
      if: inputs.platform == 'android' && steps.cache-android-sdk.outputs.cache-hit != 'true'
      uses: android-actions/setup-android@v3
      with:
        packages: ${{ steps.android-sdk-packages.outputs.packages }}

    - name: Setup Gradle (android)
      uses: gradle/actions/setup-gradle@v4
      if: inputs.platform == 'android'

    - name: Generate random working dir
      id: working-dir
      run: echo "WORKING_DIR=$(mktemp -d)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install EAS cli
      uses: expo/expo-github-action@b184ff86a3c926240f1b6db41764c83a01c02eef
      with:
        eas-version: latest
        token: ${{ inputs.expo-token }}
        expo-cache: true
        eas-cache: true
        packager: pnpm

    - name: EAS build
      run: |
        COMMIT_MESSAGE=$(git show -s --pretty=%s)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        eas build --platform ${{ inputs.platform }} --profile ${{ inputs.eas-profile }} --non-interactive --local --no-wait --message "$COMMIT_MESSAGE ($COMMIT_HASH)"
      working-directory: ${{ inputs.working-dir }}
      shell: bash
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false
        EAS_LOCAL_BUILD_WORKINGDIR: ${{ steps.working-dir.outputs.WORKING_DIR}}

    - name: Get app file path
      id: get-file-path
      shell: bash
      working-directory: ${{ inputs.working-dir }}
      run: |
        path=$(find . -name "*.${{ inputs.platform == 'ios' && 'ipa' || 'aab'}}" -type f | head -1)
        if [[ -z "$path" ]]; then
          echo "Error: No output app file found"
          exit 1
        fi
        echo "Found app file: $path"
        echo "path=$path" >> $GITHUB_OUTPUT

    - name: EAS submit
      shell: bash
      run: eas submit --platform ${{ inputs.platform }} --profile ${{ inputs.eas-profile }} --non-interactive --no-wait --path ${{ steps.get-file-path.outputs.path }}
      working-directory: ${{ inputs.working-dir }}

    - name: Upload app bundle
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.platform == 'android' && 'app.aab' || 'app.ipa' }}
        path: ${{ steps.get-file-path.outputs.path }}
