name: 'Docker CD'
description: 'Docker build, push to registry and invoke Portainer service webhook.'

inputs:
  image_tag:
    description: "Docker image tag (e.g. 'falcondev/falcon-portal-api')"
    required: true
  registry_url:
    description: 'Docker registry URL'
    required: true
  registry_username:
    description: 'Docker registry username'
    required: true
  registry_token:
    description: 'Docker registry token'
    required: true
  dockerfile:
    description: 'Dockerfile path'
    required: true
  context:
    description: 'Build context path'
  version:
    description: 'Version of this release. Used for tagging the image. (eg. v1.4.2)'
  build-args:
    description: 'Docker build arguments'
  service_webhook_url:
    description: 'Portainer service webhook URL'
  healthcheck_url:
    description: 'Post-deployment healthcheck URL'
  image_tag_override:
    description: 'Allow for overriding the image tag

runs:
  using: 'composite'
  steps:
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry_url }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_token }}

    - name: Setup Docker context
      run: docker context create builders
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        endpoint: builders

    - name: Cache Docker Buildx cache
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-cache-${{ runner.os }}-${{ inputs.image_tag }}-${{ github.sha }}
        restore-keys: |
          buildx-cache-${{ runner.os }}-${{ inputs.image_tag }}-

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry_url }}/${{ inputs.image_tag }}
        tags: ${{ inputs.image_tag_override || (inputs.version && format('latest\ntype=semver,pattern={{version}},value={0}\ntype=semver,pattern={{major}}.{{minor}},value={0}\ntype=semver,pattern={{major}},value={0}', inputs.version) || 'latest') }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        context: ${{ inputs.context || '.' }}
        file: ${{ inputs.dockerfile }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        # cache-from: type=gha,scope=${{ inputs.image_tag }}
        # cache-to: type=gha,scope=${{ inputs.image_tag }},mode=max

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      shell: bash

    - name: Push to registry
      run: echo '${{ steps.meta.outputs.tags }}' | xargs docker push
      shell: bash

    - name: Invoke deployment hook
      if: inputs.service_webhook_url
      run: curl --silent --show-error --dump-header - --fail -X POST ${{ inputs.service_webhook_url }}
      shell: bash

    - name: Healthcheck
      if: inputs.healthcheck_url
      run: |
        sleep 30
        # 8 retries exponentially backing off (finishing after 4:15 min)
        curl --silent --show-error --dump-header - --fail --retry 8 --retry-all-errors -o /dev/null '${{ inputs.healthcheck_url }}'
      shell: bash
